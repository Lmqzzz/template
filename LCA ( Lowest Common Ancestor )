
/// LCA

int l, timer;
int tin[MAXN], tout[MAXN];
int up[MAXN][20];

void dfs(const int &u, const int &p)
{
    tin[u] = ++timer;

    up[u][0] = p;
    for(int i = 1 ; i <= l ; i++)
        up[u][i] = up[up[u][i - 1]][i - 1];

    for(int v : adj[u])
        if(v != p)
            dfs(v, u);

    tout[u] = ++ timer;
}

bool is_ancestor(const int &u, const int &v)
{
    return tin[u] <= tin[v] && tout[u] >= tout[v];
}

int lca(int u, int v)
{
    if(is_ancestor(u, v)) return u;
    if(is_ancestor(v, u)) return v;

    for(int i = l ; i >= 0 ; i--)
        if(!is_ancestor(up[u][i], v))
            u = up[u][i];

    return up[u][0];
}
