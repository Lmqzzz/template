
class SegmentTree {
public:
    SegmentTree *left, *right;
    int l, r, m, lazy, val;
    SegmentTree(int l, int r) : l(l), r(r), m((l + r) >> 1), lazy(0), val(0) {
        if(l == r)
            return;
        left = new SegmentTree(l, m);
        right = new SegmentTree(m + 1, r);
    }

    void Update(int pos) {
        if (l == r) {

            return;
        }
        Down();
        if (pos <= m) {
            left->Update(pos);
        } else {
            right->Update(pos);
        }
        Up();
    }

    void Update(int s, int t) {
        if ((l > t) || (r < s)) {
            return;
        }
        if ((s <= l) && (r <= t)) {

            return;
        }
        Down();
        left->Update(s, t);
        right->Update(s, t);
        Up();
    }

    ... Get(int pos) {
        if (l == r) {
            return ...;
        }
        Down();
        if (pos <= m) {
            return left->Get(pos);
        } else {
            return right->Get(pos);
        }
    }

    ... Get(int s, int t) {
        if ((l > t) || (r < s)) {
            return (null)...;
        }
        if ((s <= l) && (r <= t)) {
            return ...;
        }
        Down();
        return (left->Get(s, t) ... right->Get(s, t));
    }

    void Up() {
        ...
    }

    void Down() {
        ...
    }
};
