/********************************************************************************************************************
*                                                                                                                   *
*   lmqzzz : ILS 21 - 24                                                                                            *
*                                                                                                                   *
*                                                                                                                   *
*       lllllll                                                                                                     *
*       l:::::l                                                                                                     *
*       l:::::l                                                                                                     *
*       l:::::l                                                                                                     *
*        l::::l    mmmmmmm    mmmmmmm      qqqqqqqqq   qqqqqzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz    *
*        l::::l  mm:::::::m  m:::::::mm   q:::::::::qqq::::qz:::::::::::::::zz:::::::::::::::zz:::::::::::::::z     *
*        l::::l m::::::::::mm::::::::::m q:::::::::::::::::qz::::::::::::::z z::::::::::::::z z::::::::::::::z      *
*        l::::l m::::::::::::::::::::::mq::::::qqqqq::::::qqzzzzzzzz::::::z  zzzzzzzz::::::z  zzzzzzzz::::::z       *
*        l::::l m:::::mmm::::::mmm:::::mq:::::q     q:::::q       z::::::z         z::::::z         z::::::z        *
*        l::::l m::::m   m::::m   m::::mq:::::q     q:::::q      z::::::z         z::::::z         z::::::z         *
*        l::::l m::::m   m::::m   m::::mq:::::q     q:::::q     z::::::z         z::::::z         z::::::z          *
*        l::::l m::::m   m::::m   m::::mq::::::q    q:::::q    z::::::z         z::::::z         z::::::z           *
*       l::::::lm::::m   m::::m   m::::mq:::::::qqqqq:::::q   z::::::zzzzzzzz  z::::::zzzzzzzz  z::::::zzzzzzzz     *
*       l::::::lm::::m   m::::m   m::::m q::::::::::::::::q  z::::::::::::::z z::::::::::::::z z::::::::::::::z     *
*       l::::::lm::::m   m::::m   m::::m  qq::::::::::::::q z:::::::::::::::zz:::::::::::::::zz:::::::::::::::z     *
*       llllllllmmmmmm   mmmmmm   mmmmmm    qqqqqqqq::::::qzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz     *
*                                                   q:::::q                                                         *
*                                                   q:::::q                                                         *
*                                                  q:::::::q                                                        *
*                                                  q:::::::q                                                        *
*                                                  q:::::::q                                                        *
*                                                  qqqqqqqqq                                                        *
*                                                                                                                   *
********************************************************************************************************************/

#include<bits/stdc++.h>
using namespace std;

#define           fi    first
#define           se    second
#define           pb    push_back
#define           ep    emplace
#define           eb    emplace_back
#define           lb    lower_bound
#define           ub    upper_bound
#define       all(x)    x.begin(), x.end()
#define      rall(x)    x.rbegin(), x.rend()
#define   uniquev(v)    v.resize(unique(all(v)) - v.begin())
#define     mem(f,x)    memset(f , x , sizeof(f))
#define        sz(x)    (int32_t)(x).size()
#define  __lcm(a, b)    ((1ll * a * b) / __gcd(a, b))
#define   rep(i,a,b)    for(int i = a ; i <= (int32_t)(b) ; i++)
#define  repp(i,a,b)    for(int i = a ; i < (int32_t)(b) ; i++)
#define   per(i,a,b)    for(int i = a ; i >= (int32_t)(b) ; i--)
#define  perr(i,a,b)    for(int i = a ; i > (int32_t)(b) ; i--)
#define          mxx    *max_element
#define          mnn    *min_element
#define         left    Kurumi_Tokisaki
#define        right    Kei_Karuizawa
#define         next    Mai_Sakurajima
#define          div    Shikimori_Micchon
#define         prev    Chizuru_Mizuhara
#define    cntbit(x)    __builtin_popcountll(x)
#define      MASK(x)    ( 1ll << (x) )
#define          Yes    cout << "Yes"
#define          YES    cout << "YES"
#define           No    cout << "No"
#define           NO    cout << "NO"
#define           AA    cout << "Alice"
#define           BB    cout << "Bob"


void __print(int x) {cerr << x;}
void __print(long x) {cerr << x;}
void __print(long long x) {cerr << x;}
void __print(unsigned x) {cerr << x;}
void __print(unsigned long x) {cerr << x;}
void __print(unsigned long long x) {cerr << x;}
void __print(float x) {cerr << x;}
void __print(double x) {cerr << x;}
void __print(long double x) {cerr << x;}
void __print(char x) {cerr << '\'' << x << '\'';}
void __print(const char *x) {cerr << '\"' << x << '\"';}
void __print(const string &x) {cerr << '\"' << x << '\"';}
void __print(bool x) {cerr << (x ? "true" : "false");}

template<typename T, typename V>
void __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ", "; __print(x.second); cerr << '}';}
template<typename T>
void __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? ", " : ""), __print(i); cerr << "}";}
void _print() {cerr << "]\n";}
template <typename T, typename... V>
void _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << ", "; _print(v...);}
#define deb(x...) cerr << "[ " <<__func__<< " : " <<__LINE__<< " ]" << " : " << "[" << #x << "] = ["; _print(x); cerr << endl;

template <class... T> inline void read(T&... args) { (( cin >> args ), ... ) ; }
template <class T> inline T min(const T &a, const T &b, const T &c) { return min(a, min(b, c)); }
template <class T> inline T max(const T &a, const T &b, const T &c) { return max(a, max(b, c)); }
template <class T, class U> inline bool mini(T &a, const U &b) { if(a > b) { a = b; return 1; } return 0; }
template <class T, class U> inline bool maxi(T &a, const U &b) { if(a < b) { a = b; return 1; } return 0; }

typedef           long double    ld;
typedef             long long    ll;
typedef       const long long    cll;
typedef             const int    cint;
typedef        pair<int, int>    ii;
typedef  tuple<int, int, int>    iii;
typedef         pair<ii, int>    piii;
typedef         pair<int, ii>    ipii;
typedef         pair<ll, int>    li;
typedef          pair<ll, ll>    pll;
typedef           vector<int>    vi;
typedef            vector<ll>    vll;
typedef            vector<vi>    vvi;
typedef           vector<vll>    vvl;
typedef            vector<ii>    vii;
typedef           vector<iii>    viii;
typedef           vector<vii>    vvii;
typedef           vector<vii>    vvii;
typedef         array<int, 3>    ar3;
typedef         array<int, 4>    ar4;
typedef         array<int, 5>    ar5;
typedef           vector<ar3>    var3;
typedef           vector<ar4>    var4;
typedef           vector<ar5>    var5;
constexpr   long double PI  =  acos( -1 );
constexpr  long double eps  =  1e-9;
constexpr     int32_t base  =  277;
constexpr        int DELTA  =  2e5 + 1;
constexpr     int16_t dr[]  =  {0, 0, 1, -1};
constexpr     int16_t dc[]  =  {-1, 1, 0, 0};
constexpr      int64_t MOD  =  1e9 + 7 ;
constexpr     int32_t MAXN  =  1e6 + 10;


constexpr   bool MULTITEST  =  0;


void solve(){

}

void init() {

}

/// TASK
/// -----------------------------
#define TASK ""
///------------------------------

void gentest() {
    if (fopen(TASK ".inp", "r"))
        freopen(TASK ".inp","w",stdout);
    srand(time(0));
}
int32_t main() {
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    if (fopen(TASK ".inp", "r")) {
        freopen(TASK ".inp", "r", stdin);
        freopen(TASK ".out", "w", stdout);
    }
//    gentest();
//    return 0;
    init();
    int32_t TT = 1;
    if ( MULTITEST ) cin >> TT;
    for(int32_t TTT = 1 ; TTT <= TT ; TTT++) {
        solve();
        cout << '\n';
    }
}
